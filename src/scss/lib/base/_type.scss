/* TYPE */

html {
  // Will be one rem
  // 10px by default (easy to compute)
  font-size: 10 / 16 * 100%; // target size (10) / default size (16)

  // GLOBAL ZOOM
  // Use $breakpoints-pixels-per-rem map
  // Alter px/rem ratio depending on breakpoint
  @each $breakpoint-name, $breakpoint-width in $breakpoints {

    @if map-has-key($breakpoints-pixels-per-rem, $breakpoint-name) {

      @include bp($breakpoint-name) {
        $pxPerRem: map-get($breakpoints-pixels-per-rem, $breakpoint-name);
        font-size: $pxPerRem / 16 * 100%; // target size / default size
      }

    } @else {
      @error 'Big text: no $pixels-per-rem value for breakpoint #{$breakpoint-name}!';
    }
  }
}

body {
  font-family: $font-family-base;
  font-size: $font-size-base;
  line-height: $line-height-base;
}

@mixin reset-list() {
  list-style-type: none;
  padding-left: 0;
}

// Reset all margin top
h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6,
p,
ul,
blockquote, cite {
  margin-top: 0;
}

// PARAGRAPHS

p {
  margin-bottom: $gutter;

  &:last-child {
    margin-bottom: 0;
  }
}

.small {
  font-size: $font-size-small;
}

.big {
  font-size: $font-size-big;
}

blockquote {
  border-left: $gutter-quarter solid $color-primary;
  margin-left: 0;
  padding-left: $gutter;

  > p {
    font-family: $font-family-serif;
    font-style: italic;
    color: $gray;
    margin-bottom: $gutter-half;
    text-indent: -$gutter / 3;
  
    &::before {
      content: "“ ";
    }
  
    &::after {
      content: " ”";
    }
  }

  > cite {
    display: block;
    margin-bottom: $gutter;
  }
}


hr {
  margin-bottom: $gutter;
}

// LINKS

a {
  color: $link-color;
  text-decoration: none;
  transition: all 0.25s;

  @include hocus() {
    color: $link-color-active;
  }
}

// HEADINGS

@mixin h($level) {
  @if $level == 1 {
    margin-bottom: $gutter-double;
    font-size: $font-size-h1 * 3 / 4;
    line-height: $line-height-smaller;
    font-weight: $font-weight-h1;
    font-family: $font-family-h1;
  
    @include bp('xs') {
      margin-bottom: $gutter-double;
      font-size: $font-size-h1 * 7 / 8;
    }
  
    @include bp('sm') {
      margin-bottom: $gutter-double;
      font-size: $font-size-h1;
    }

  } @elseif $level == 2 {
    font-size: $font-size-h2 * 3 / 4;
    line-height: $line-height-smaller;
    font-weight: $font-weight-h2;
    font-family: $font-family-h2;
  
    @include bp('xs') {
      font-size: $font-size-h2 * 7 / 8;
      line-height: $line-height-smaller;
    }
  
    @include bp('sm') {
      font-size: $font-size-h2;
      line-height: $line-height-smaller;
    }

  } @elseif $level == 3 {
    font-size: $font-size-h3 * 3 / 4;
    line-height: $line-height-small;
    font-weight: $font-weight-h3;
    font-family: $font-family-h3;
  
    @include bp('xs') {
      font-size: $font-size-h3 * 7 / 8;
      line-height: $line-height-small;
    }
  
    @include bp('sm') {
      font-size: $font-size-h3;
      line-height: $line-height-small;
    }

  } @elseif $level == 4 {
    font-size: $font-size-h4;
    line-height: $line-height-small;
    font-weight: $font-weight-h4;
    font-family: $font-family-h4;

  } @elseif $level == 5 {
    font-size: $font-size-h5;
    font-weight: $font-weight-h5;
    font-family: $font-family-h5;

  } @elseif $level == 6 {
    font-size: $font-size-h6;
    font-weight: $font-weight-h6;
    font-family: $font-family-h6;
  }
}

h1, .h1 { @include h(1); }
h2, .h2 { @include h(2); }
h3, .h3 { @include h(3); }
h4, .h4 { @include h(4); }
h5, .h5 { @include h(5); }
h6, .h6 { @include h(6); }

// MISC

// Monospace elements
pre,
code {
  font-family: $font-family-monospace;
}
